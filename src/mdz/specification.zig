// # Markdown-Z (MDZ)
const th = @import("./test_helpers.zig");

// Markdown-Z is a variation of Markdown, CommonMark, and its various popular extensions implemented in Zig for WASM. It is designed to produce HTML from a simplified markup language at lightning-fast speeds.

// This specification draws inspiration from [CommonMark 0.31.2](https://spec.commonmark.org/0.31.2/), [Github-Flavored Markdown 0.29](https://github.github.com/gfm/), [Markdown-it](https://github.com/markdown-it/markdown-it), and [Djot](https://djot.net/).

// ## 1. Prelude

// ### 1.1. What is Markdown?

// Markdown is a plain text format for writing structured documents. The goal of Markdown is to provide a human-readable syntax that can be easily transformed into HTML. It was originally created in 2004 by [John Gruber](https://daringfireball.net/projects/markdown/syntax) and has since become relatively standardized by specifications like [CommonMark](https://commonmark.org/) and [Github-Flavored Markdown](https://github.github.com/gfm/). Since its conception, there have been many additions and extensions created for the purpose of furthering Markdown capabilities.

// ### 1.2 Why is Another Spec Needed?

// While CommonMark exists to standardize the original Markdown syntax, the spec is complicated, outdated, and ambiguous. To illustrate this, consider the following examples.

// * Each of the lines below are identical according to CommonMark:
//     ```plaintext
//     text\r\n
//     text\r
//     text\n
//     ```
// * Each of the lines below are identical according to CommonMark:
//     ```plaintext
//     > blockquote
//     >blockquote
//        > blockquote
//     >    blockquote
//     ```
// * Each of the lines below are identical according to CommonMark:
//     ```plaintext
//     ---
//     ***
//     * * *
//     -\t-\t-
//      **  * ** * ** * **
//     -     -      -      -
//     ```
// * There are two ways to write code blocks: [fenced code blocks](https://spec.commonmark.org/0.31.2/#fenced-code-blocks) and [indented code blocks](https://spec.commonmark.org/0.31.2/#indented-code-blocks).
// * There are two ways to write headings: [Setext headings](https://spec.commonmark.org/0.31.2/#setext-headings) and [ATX headings](https://spec.commonmark.org/0.31.2/#atx-headings).
// * Indented code blocks cannot interrupt paragraphs, but paragraphs can interrupt indented code blocks.
// * There are ["tight" and "loose" lists](https://spec.commonmark.org/0.31.2/#loose) depending on the spacing between each line item.
// * Paragraphs (and other blocks) can be indented up to 3 spaces and the leading whitespace will be trimmed, but 4 spaces makes the paragraph a code block.
// * Whitespace is preserved in the middle of text content, but not between blocks or at the start or end of text.
// * Code spans cannot be escaped with a backslash but other inlines can be escaped.

// This specification exists to clarify these edge cases and remove ambiguity.

// This specification is autogenerated from Zig test code to ensure that the test cases in this specification stay in sync with the implementation. Each test case contains a multiline input string and output string. If you're not familiar with Zig, multiline strings begin with `\\` tokens, have no escapes, and can span multiple lines. This best preserves the readability of the inputs and outputs while reading this specification.

// ### 1.3. What is Markdown-Z?

// Markdown-Z attempts to improve upon the flaws and inconsistencies of Markdown and its derivative specifications. This specification heavily reduces the scope and complexity of Markdown to a smart subset of the original CommonMark spec while adding popular extensions that improve Markdown document writing capabilities.

// The core goals of Markdown-Z are the following:

// * Reduced complexity. There should be one and only one syntax to write a each Markdown "block".
// * Modernization. There is no need to support older syntax styles because they holds historical significance.
// * Efficiency. Implementations should be able to parse Markdown-Z documents without backtracking and zero heaps allocations in O(n).
// * WYSIWYG. The CommonMark spec handles whitespace delicately, omitting it in certain scenarios and creating code blocks or nested containers in others. Whitespace should be passed through as is.
// * Close compatibility. Excluding extensions, the markup defined in this document should produce similar output to other CommonMark implementations to preserve relative backwards compatibility with existing Markdown.

// ## 2. Preliminaries

// ### 2.1. Characters, Lines, and Blocks

// All characters are valid in a Markdown-Z document.

// A <dfn>line ending</dfn> is a line feed character (`U+000A`) or a carriage return character (`U+000D`) followed by a line feed character.

// A <dfn>line</dfn> is a sequence of 0 or more characters followed by a line ending.

// A <dfn>blank line</dfn> is a line containing no characters except for the line ending. Blank lines are only used for visual and block separation - multiple consecutive blank lines do not affect the HTML output.

// A <dfn>space</dfn> is `U+0020`.

// A <dfn>block</dfn> is a content type supported by Markdown-Z which transforms into HTML in the output. Usually, blocks are indicated by a unique <dfn>marker</dfn> (special sequence of characters) at the start and/or end of the line.

// ### 2.2. HTML

// Markdown-Z is designed to integrate with HTML. Raw HTML can be written alongside markup. When not in a code block or code span, unescaped characters as passed through as is, meaning no transformation will occur for HTML tags.

// This also means that **no sanitization occurs**. If security is a concern, the output must be sanitized separately.

// ### 2.3. Backslash Escapes

// A backslash character (`U+005C`) escapes the character immediately proceeding it. This means that the following character will be interpreted as literal text and not as a block marker. The backslash character is removed from the final output.

// ```zig
test "2.3.1" {
    const input =
        \\\*not bold\*
    ;
    const output =
        \\<p>*not bold*</p>
    ;
    try th.expectParseMDZ(input, output);
}
// ```

// This means that when `>`, `<` are backslash escaped, they must be translated to ampersand codes to prevent invalid HTML.

// ```zig
test "2.3.2" {
    const input =
        \\\> not a blockquote
    ;
    const output =
        \\<p>&gt; not a blockquote</p>
    ;
    try th.expectParseMDZ(input, output);
}
// ```

// ```zig
test "2.3.3" {
    const input =
        \\\<div\> \&gt;
    ;
    const output =
        \\<p>&lt;div&gt; &amp;gt;</p>
    ;
    try th.expectParseMDZ(input, output);
}
// ```

// Backslash characters will not appear in the final output unless they are escaped themselves.

// ```zig
test "2.3.4" {
    const input =
        \\foo \\ bar
    ;
    const output =
        \\<p>foo \ bar</p>
    ;
    try th.expectParseMDZ(input, output);
}
// ```

// Line endings cannot be escaped.

// ```zig
test "2.3.5" {
    const input =
        \\\Hello, world!\
    ;
    const output =
        \\<p>Hello, world!</p>
    ;
    try th.expectParseMDZ(input, output);
}
// ```

// However, backslash rules are ignored within code blocks.

// TODO implement code blocks
// ```zig
// test "2.3.6" {
//     const input =
//         \\```zig
//         \\const str =
//         \\  \\hello,
//         \\  \\world!
//         \\;
//         \\```
//     ;
//     const output =
//         \\<pre><code class="language-zig">const str =
//         \\  \\hello,
//         \\  \\world!
//         \\;
//         \\</code></pre>
//     ;
//     try th.expectParseMDZ(input, output);
// }
// ```

// ## 3. Blocks

// The contents of a Markdown-Z document can be divided into three types of content:

// 1. <dfn>Line blocks</dfn>, which dictate how a line (or group of lines) is rendered,
// 1. <dfn>Leaf blocks</dfn>, which are constrained within a particular block, and
// 1. <dfn>plain text</dfn>.

// Blocks may contain other child blocks, but a leaf block cannot contain a line block. All line blocks must be separated by a blank line.

// Blocks may only be nested up to 16 levels deep. This keeps documents readable and implementations simple.

// ## 4. Line Blocks

// ### 4.1. Block Quotes

// A <dfn>block quote marker</dfn> consists of a `>` character followed by a space followed by content. Block quote markers indicate that the following content should be nested within a block quote.

// ```zig
test "4.1.1" {
    const input =
        \\> hello
    ;
    const output =
        \\<blockquote>
        \\<p>hello</p>
        \\</blockquote>
    ;
    try th.expectParseMDZ(input, output);
}
// ```
